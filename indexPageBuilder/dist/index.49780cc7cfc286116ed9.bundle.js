(()=>{"use strict";document.querySelector("#root").innerHTML='<h1>Jayce\'s Git Page Content Table</h1> <h2>Content1. first</h2> <ol start="2"> <li>second</li> <li>third</li> </ol> <h3>1. 基本使用</h3> <p>transition 的类名对应了 2 个过程：动画的进入和离开， 分别对应 3 个关键帧：</p> <p><strong>进入</strong></p> <ol> <li>xxx-enter-from : 进入的开始状态</li> <li>xxx-enter-active: 进入的执行中动画</li> <li>xxx-enter-to : 进入的结束状态</li> </ol> <p><strong>离开</strong></p> <ol> <li>xxx-leave-from: 离开的开始状态</li> <li>xxx-leave-active: 离开执行中动画</li> <li>xxx-leave-to: 离开的结束状态</li> </ol> <pre><code>&#x3C;transition name="any">\n    &#x3C;div class="box" v-if="toggle">&#x3C;/div>\n  &#x3C;/transition>\n</code></pre> <pre><code>&#x3C;style>\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: rgb(4, 0, 255);\n  transform: translate(800px, 200px) scale(3);\n}\n.any-enter-from {\n  width: 0;\n  height: 0;\n  background-color: rgb(0, 0, 0);\n  transform: translate(0, 0) scale(0) rotate(1960deg);\n}\n.any-enter-active {\n  transition: all 0.8s ease-in-out;\n}\n.any-enter-to {\n  width: 100px;\n  height: 100px;\n  background-color: rgb(4, 0, 255);\n  transform: translate(800px, 200px) scale(3) rotate(0);\n}\n.any-leave-from {\n  /* 这里写不写都可以，和 .any-enter-to 一样的, 所以也可以写在一起*/\n  width: 100px;\n  height: 100px;\n  background-color: rgb(4, 0, 255);\n  transform: translate(800px, 200px) scale(3) rotate(0);\n}\n.any-leave-active {\n  transition: all 0.8s ease-in-out;\n}\n.any-leave-to {\n  width: 0;\n  height: 0;\n  background-color: rgb(0, 0, 0);\n  transform: translate(0, 0) scale(0) rotate(1960deg);\n}\n&#x3C;/style>\n</code></pre> <h4><strong>改写类名</strong></h4> <p>你也可以向 <code>&#x3C;Transition></code> 传递以下的 props 来指定自定义的过渡 class：</p> <ul> <li><code>enter-from-class</code></li> <li><code>enter-active-class</code></li> <li><code>enter-to-class</code></li> <li><code>leave-from-class</code></li> <li><code>leave-active-class</code></li> <li><code>leave-to-class</code></li> </ul> <pre><code>&#x3C;transition\n  enter-from-class="a"\n  enter-active-class="aa"\n  enter-to-class="aaa"\n  leave-from-class="b"\n  leave-active-class="bb"\n  leave-to-class="bbb"\n>\n    &#x3C;div class="box" v-if="toggle0">&#x3C;/div>\n  &#x3C;/transition>\n</code></pre> <pre><code>&#x3C;style>\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: rgb(4, 0, 255);\n  transform: translate(800px, 200px) scale(3);\n}\n.a {\n  width: 0;\n  height: 0;\n  background-color: rgb(0, 0, 0);\n  transform: translate(0, 0) scale(0) rotate(1960deg);\n}\n.aa {\n  transition: all 0.8s ease-in-out;\n}\n.aaa {\n  width: 100px;\n  height: 100px;\n  background-color: rgb(4, 0, 255);\n  transform: translate(800px, 200px) scale(3) rotate(0);\n}\n.b {\n  /* 这里写不写都可以，和 .a 一样的, 所以也可以写在一起*/\n  width: 100px;\n  height: 100px;\n  background-color: rgb(4, 0, 255);\n  transform: translate(800px, 200px) scale(3) rotate(0);\n}\n.bb {\n  transition: all 0.8s ease-in-out;\n}\n.bbb {\n  width: 0;\n  height: 0;\n  background-color: rgb(0, 0, 0);\n  transform: translate(0, 0) scale(0) rotate(1960deg);\n}\n&#x3C;/style>\n</code></pre> <h3>2. 结合 animation 属性</h3> <p>通过<code>@keyframe</code> 定义好关键帧以后，指定 <code>xxx-enter-active</code> 和 <code>xxx-leave-active</code> 两个关键帧即可。</p> <pre><code>&#x3C;transition name="any1">\n    &#x3C;div class="box1" v-if="toggle1">&#x3C;/div>\n  &#x3C;/transition>\n</code></pre> <pre><code>&#x3C;style>\n.box1 {\n  width: 100px;\n  height: 100px;\n  border: 1px solid;\n}\n.any1-enter-active {\n  animation: bounce-in 0.5s;\n}\n.any1-leave-active {\n  animation: bounce-in 0.5s reverse;\n}\n@keyframes bounce-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.25);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n&#x3C;/style>\n</code></pre> <h3>3. 结合 css 动画库（如 animation.css）</h3> <p>无需写特定的 css 样式，直接通过 <code>enter-active-class</code> 和 <code>leave-active-class</code> 关键帧 props 动画库所暴露的 类名即可。</p> <pre><code>$ npm install animate.css --save\n</code></pre> <pre><code>import \'animate.css\';\n</code></pre> <pre><code>&#x3C;transition\n  name="any2"\n  enter-active-class="animate__animated animate__backInDown"\n  leave-active-class="animate__animated animate__backOutUp"\n>\n    &#x3C;div class="box2" v-if="toggle2">&#x3C;/div>\n  &#x3C;/transition>\n</code></pre> <pre><code>&#x3C;style>\n.box2 {\n  width: 200px;\n  height: 100px;\n  border: 1px solid;\n}\n&#x3C;/style>\n</code></pre> <h3>4. duration 属性</h3> <p>该属性指定了动画的时长</p> <p>如, 同时指定动画入和动画出的时长为 2s：</p> <pre><code>&#x3C;transition\n  name="any2"\n  :duration="2000"\n  enter-active-class="animate__animated animate__backInDown"\n  leave-active-class="animate__animated animate__backOutUp"\n>\n    &#x3C;div class="box2" v-if="toggle2">&#x3C;/div>\n  &#x3C;/transition>\n</code></pre> <p>指定动画入的时长为 2s, 动画出的时长为 300ms ：</p> <pre><code>&#x3C;transition\n  name="any2"\n  :duration="{ enter: 2000, leave: 300 }"\n  enter-active-class="animate__animated animate__backInDown"\n  leave-active-class="animate__animated animate__backOutUp"\n>\n    &#x3C;div class="box2" v-if="toggle2">&#x3C;/div>\n  &#x3C;/transition>\n</code></pre> <h3>5. 定义动画序列</h3> <pre><code>&#x3C;script setup>\nimport { ref } from \'vue\'\n\nconst show = ref(true)\n&#x3C;/script>\n\n&#x3C;template>\n  &#x3C;button @click="show = !show">Toggle&#x3C;/button>\n  &#x3C;Transition duration="550" name="nested">\n    &#x3C;div v-if="show" class="outer">\n      &#x3C;div class="inner">Hello&#x3C;/div>\n    &#x3C;/div>\n  &#x3C;/Transition>\n&#x3C;/template>\n\n&#x3C;style>\n.outer,\n.inner {\n  background: #eee;\n  padding: 30px;\n  min-height: 100px;\n}\n\n.inner {\n  background: #ccc;\n}\n\n.nested-enter-active,\n.nested-leave-active {\n  transition: all 0.3s ease-in-out;\n}\n/* delay leave of parent element */\n.nested-leave-active {\n  transition-delay: 0.25s;\n}\n\n.nested-enter-from,\n.nested-leave-to {\n  transform: translateY(30px);\n  opacity: 0;\n}\n\n/* we can also transition nested elements using nested selectors */\n.nested-enter-active .inner,\n.nested-leave-active .inner {\n  transition: all 0.3s ease-in-out;\n}\n/* delay enter of nested element */\n.nested-enter-active .inner {\n  transition-delay: 0.25s;\n}\n\n.nested-enter-from .inner,\n.nested-leave-to .inner {\n  transform: translateX(30px);\n  /*\n  \tHack around a Chrome 96 bug in handling nested opacity transitions.\n    This is not needed in other browsers or Chrome 99+ where the bug\n    has been fixed.\n  */\n  opacity: 0.001;\n}\n&#x3C;/style>\n</code></pre> '})();