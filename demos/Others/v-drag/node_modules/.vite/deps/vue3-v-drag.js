// node_modules/.pnpm/vue3-v-drag@1.0.1/node_modules/vue3-v-drag/v-drag.ts
var timeStamp = (/* @__PURE__ */ new Date()).getTime();
var boxClassName = `box-${timeStamp}`;
var pointerClassName = `pointer-${timeStamp}`;
var addElPositionIndicator = (moveElement) => {
  const pointerXAxisLabel = document.createElement("span");
  const pointerYAxisLabel = document.createElement("span");
  pointerXAxisLabel.classList.add(`${boxClassName}-labelx`);
  pointerYAxisLabel.classList.add(`${boxClassName}-labely`);
  moveElement.appendChild(pointerXAxisLabel);
  moveElement.appendChild(pointerYAxisLabel);
};
var updateElPositionIndicator = (x, y) => {
  const pointerxlabel = document.querySelector(`.${boxClassName}-labelx`);
  const pointerylabel = document.querySelector(`.${boxClassName}-labely`);
  pointerxlabel.textContent = x;
  pointerylabel.textContent = y;
};
var addPointerIndicator = () => {
  const pointer = document.querySelector(`.${pointerClassName}`) || document.createElement("div");
  pointer.classList.add(boxClassName, pointerClassName);
  const pointerXAxisLabel = document.createElement("span");
  const pointerYAxisLabel = document.createElement("span");
  pointerXAxisLabel.classList.add(`${pointerClassName}-labelx`);
  pointerYAxisLabel.classList.add(`${pointerClassName}-labely`);
  pointer.appendChild(pointerXAxisLabel);
  pointer.appendChild(pointerYAxisLabel);
  document.body.appendChild(pointer);
};
var updatePointerIndicator = (e) => {
  const pointer = document.querySelector(`.${pointerClassName}`) || document.createElement("div");
  const pointerxlabel = document.querySelector(`.${pointerClassName}-labelx`);
  const pointerylabel = document.querySelector(`.${pointerClassName}-labely`);
  pointerxlabel.textContent = e.clientX + "px";
  pointerylabel.textContent = e.clientY + "px";
  pointer.style.left = e.clientX + "px";
  pointer.style.top = e.clientY + "px";
};
var removePointerIndicator = () => {
  const pointer = document.querySelector(`.${pointerClassName}`);
  pointer && document.body.removeChild(pointer);
};
var attachRelatedClass = (indicator, el) => {
  indicator && el.classList.add(boxClassName);
  const style = document.createElement("style");
  style.textContent = `
.${boxClassName} {
  position: absolute;
}
.${boxClassName}::before {
  content: "";
  width: 1px;
  border-top: 1px dashed;
  left: -100vw;
  width: 200vw;
  top: -2px;
  position: absolute;
}
.${boxClassName}::after {
  content: "";
  width: 1px;
  border-right: 1px dashed;
  left: -2px;
  height: 200vh;
  top: -100vh;
  position: absolute;
}

.${pointerClassName}::before {
  border-top: 1px dashed red;
}
.${pointerClassName}::after {
  border-right: 1px dashed red;
}

.${pointerClassName}-labelx,.${pointerClassName}-labely{
  color:red;
  position: absolute;
}
.${pointerClassName}-labelx {
  left:100px
}
.${pointerClassName}-labely {
  bottom:100px
}
.${boxClassName}-labelx,.${boxClassName}-labely{
  color:blue;
  position: absolute;
}
.${boxClassName}-labelx{
  left:-100px
  
}
.${boxClassName}-labely{
  top:-100px

}
`;
  document.body.appendChild(style);
};
var _vDrag = (el, binding) => {
  const {
    modifiers: { indicator, keep },
    value
  } = binding;
  const userValue = value;
  let moveElement = el;
  attachRelatedClass(indicator, el);
  const mouseDown = (e) => {
    userValue == null ? void 0 : userValue.mousedown();
    indicator && addPointerIndicator();
    indicator && addElPositionIndicator(moveElement);
    let x = e.clientX - el.offsetLeft;
    let y = e.clientY - el.offsetTop;
    const move = (e2) => {
      indicator && updatePointerIndicator(e2);
      el.style.left = e2.clientX - x + "px";
      el.style.top = e2.clientY - y + "px";
      indicator && updateElPositionIndicator(el.style.left, el.style.top);
    };
    document.addEventListener("mousemove", move);
    const mouseup = () => {
      userValue == null ? void 0 : userValue.mouseup();
      !keep && removePointerIndicator();
      document.removeEventListener("mousemove", move);
      document.removeEventListener("mouseup", mouseup);
    };
    document.addEventListener("mouseup", mouseup);
  };
  moveElement.addEventListener("mousedown", mouseDown);
};
var vDragIntaller = {
  install(app) {
    console.log("[app]: ", app);
    app.directive("drag", _vDrag);
  }
};
var v_drag_default = vDragIntaller;
var vDrag = vDragIntaller;
export {
  v_drag_default as default,
  vDrag
};
//# sourceMappingURL=vue3-v-drag.js.map
